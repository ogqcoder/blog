{
  "_args": [
    [
      {
        "raw": "dompurify@^2.0.12",
        "scope": null,
        "escapedName": "dompurify",
        "name": "dompurify",
        "rawSpec": "^2.0.12",
        "spec": ">=2.0.12 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\garth\\Documents\\codeprojects\\blog2"
    ]
  ],
  "_from": "dompurify@^2.0.12",
  "_hasShrinkwrap": false,
  "_id": "dompurify@2.0.12",
  "_location": "/dompurify",
  "_nodeVersion": "13.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dompurify_2.0.12_1593009094197_0.21844276917785255"
  },
  "_npmUser": {
    "name": "cure53",
    "email": "mario@cure53.de"
  },
  "_npmVersion": "6.14.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dompurify@^2.0.12",
    "scope": null,
    "escapedName": "dompurify",
    "name": "dompurify",
    "rawSpec": "^2.0.12",
    "spec": ">=2.0.12 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dompurify/-/dompurify-2.0.12.tgz",
  "_shasum": "284a2b041e1c60b8e72d7b4d2fadad36141254ae",
  "_shrinkwrap": null,
  "_spec": "dompurify@^2.0.12",
  "_where": "C:\\Users\\garth\\Documents\\codeprojects\\blog2",
  "author": {
    "name": "Mario Heiderich",
    "email": "mario@cure53.de",
    "url": "https://cure53.de/"
  },
  "browser": "dist/purify.js",
  "bugs": {
    "url": "https://github.com/cure53/DOMPurify/issues"
  },
  "dependencies": {},
  "description": "DOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. It's written in JavaScript and works in all modern browsers (Safari, Opera (15+), Internet Explorer (10+), Firefox and Chrome - as well as almost anything else using Blink or WebKit). DOMPurify is written by security people who have vast background in web attacks and XSS. Fear not.",
  "devDependencies": {
    "@babel/plugin-external-helpers": "7.8.3",
    "babel": "^6.23.0",
    "babel-core": "^6.26.3",
    "babel-preset-env": "^1.7.0",
    "cross-env": "^7.0.2",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-prettier": "^3.1.3",
    "he": "^1.2.0",
    "jquery": "^3.5.0",
    "jsdom": "8.x.x",
    "karma": "^5.1.0",
    "karma-browserstack-launcher": "^1.5.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-firefox-launcher": "^1.3.0",
    "karma-fixture": "^0.2.6",
    "karma-html2js-preprocessor": "^1.0.0",
    "karma-json-fixtures-preprocessor": "0.0.6",
    "karma-qunit": "^1.0.0",
    "karma-rollup-preprocessor": "^5.0.2",
    "lodash.isarray": "^4.0.0",
    "lodash.sample": "^4.2.1",
    "minimist": "^1.2.5",
    "npm-run-all": "^4.1.5",
    "pre-commit": "^1.1.2",
    "prettier": "^2.0.4",
    "qunit-parameterize": "^0.4.0",
    "qunit-tap": "^1.5.0",
    "qunitjs": "^1.23.1",
    "rimraf": "^3.0.2",
    "rollup": "^0.68.2",
    "rollup-plugin-babel": "^3.0.3",
    "rollup-plugin-commonjs": "^8.4.1",
    "rollup-plugin-includepaths": "^0.2.3",
    "rollup-plugin-node-resolve": "^3.4.0",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^5.3.0",
    "rollup-watch": "^4.3.1",
    "xo": "^0.29.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-Fl8KseK1imyhErHypFPA8qpq9gPzlsJ/EukA6yk9o0gX23p1TzC+rh9LqNg1qvErRTc0UNMYlKxEGSfSh43NDg==",
    "shasum": "284a2b041e1c60b8e72d7b4d2fadad36141254ae",
    "tarball": "https://registry.npmjs.org/dompurify/-/dompurify-2.0.12.tgz",
    "fileCount": 11,
    "unpackedSize": 514397,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe82PGCRA9TVsSAnZWagAAq7QQAIuh+lDjxDQv2HFL6CzQ\ntReKD8CHR/JhLjsFdQt21Wv/jTIgE4CZN8EXtGI96BAeOr1TQekVTy4fiYbQ\n0HQ2sTxntZsBCa4HGKSPpLRSNu08SSYpRGiVN2g9VQYFLow4a1DgJPxAzRHW\neMDiV3OhuAKBjjsIcZ6L6STGQIL3peVFrDUTsKMRpY3uB6s7Gwu7R8ss7CoS\ntL2i+/jMx1wChubaj0KMQYvX+KfUmMA4aG1x8pV9OxwTtV7NR7gS27ylWbg8\n1vw1AKPxR0oWzMu2oTKp6IIoWS/OJPdJSsmUgvZQYsTn5jV4GKaVCRFIg7x8\n3govlXNmzpc2WXxwsUJ0s9+8/Lo4ROd4A1d7fNi9Jm8LcM+3VYbLupZVdiVV\nlO3fB+1hNznbZAoImHLlecTktaFIzV9lDId4gIcQYhCNv24wYIhAshpmT8Jb\n8UqCYnmCgDyJIyx/GgnBY3Jrxne0AsSfa4Y8lPlE57FkCgA4Z6jl5KSEFcQG\nL0EM0PUcVW5++2IRSwD46gzCIcrWFr+Qqk/rJ30hEiSfPcgJ3Bms1XZy3Fht\nYBlTm5sljCGxkZqcnWq45DwHOkOHPCEERaDss+37Dw1rHvbs9FeUdVuLqCgp\nz9v9nC4lhk71PaB4TSW0P4hwKxTggnT+OD8pHVjDC6WY0afBQcC3wmv2Yarm\nYWE/\r\n=BWo8\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist"
  ],
  "gitHead": "05bf3fc4dce98b0f182b8b988f9d39264144b3be",
  "homepage": "https://github.com/cure53/DOMPurify",
  "keywords": [
    "dom",
    "xss",
    "html",
    "svg",
    "mathml",
    "security",
    "secure",
    "sanitizer",
    "sanitize",
    "filter",
    "purify"
  ],
  "license": "MPL-2.0 OR Apache-2.0",
  "main": "dist/purify.cjs.js",
  "maintainers": [
    {
      "name": "cure53",
      "email": "mario@cure53.de"
    }
  ],
  "module": "dist/purify.es.js",
  "name": "dompurify",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "build",
    "commit-amend-build"
  ],
  "readme": "# DOMPurify\n\n[![Bower version](https://badge.fury.io/bo/dompurify.svg)](http://badge.fury.io/bo/dompurify)  [![npm version](https://badge.fury.io/js/dompurify.svg)](http://badge.fury.io/js/dompurify)  ![Build and Test](https://github.com/cure53/DOMPurify/workflows/Build%20and%20Test/badge.svg?branch=main)  [![Downloads](https://img.shields.io/npm/dm/dompurify.svg)](https://www.npmjs.com/package/dompurify)  [![gzip size](http://img.badgesize.io/https://cdn.jsdelivr.net/npm/dompurify/dist/purify.min.js?compression=gzip)](https://cdn.jsdelivr.net/npm/dompurify/dist/purify.min.js)  [![install size](https://badgen.net/packagephobia/install/dompurify)](https://packagephobia.now.sh/result?p=dompurify)\n\n[![NPM](https://nodei.co/npm/dompurify.png)](https://nodei.co/npm/dompurify/)\n\nDOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG.\n\nIt's also very simple to use and get started with. DOMPurify was [started in February 2014](https://github.com/cure53/DOMPurify/commit/a630922616927373485e0e787ab19e73e3691b2b) and, meanwhile, has reached version 2.0.12.\n\nDOMPurify is written in JavaScript and works in all modern browsers (Safari, Opera (15+), Internet Explorer (10+), Edge, Firefox and Chrome - as well as almost anything else using Blink or WebKit). It doesn't break on MSIE6 or other legacy browsers. It either uses [a fall-back](#what-about-older-browsers-like-msie8) or simply does nothing.\n\nOur automated tests cover [26 different browsers](https://github.com/cure53/DOMPurify/blob/main/test/karma.custom-launchers.config.js#L5) right now, more to come. We also cover Node.js v12.0.0 and v13.0.0, running DOMPurify on [jsdom](https://github.com/tmpvar/jsdom). Older Node.js versions are known to work as well.\n\nDOMPurify is written by security people who have vast background in web attacks and XSS. Fear not. For more details please also read about our [Security Goals & Threat Model](https://github.com/cure53/DOMPurify/wiki/Security-Goals-&-Threat-Model). Please, read it. Like, really.\n\n## What does it do?\n\nDOMPurify sanitizes HTML and prevents XSS attacks. You can feed DOMPurify with string full of dirty HTML and it will return a string (unless configured otherwise) with clean HTML. DOMPurify will strip out everything that contains dangerous HTML and thereby prevent XSS attacks and other nastiness. It's also damn bloody fast. We use the technologies the browser provides and turn them into an XSS filter. The faster your browser, the faster DOMPurify will be.\n\n## How do I use it?\n\nIt's easy. Just include DOMPurify on your website.\n\n### Using the unminified development version\n\n```html\n<script type=\"text/javascript\" src=\"src/purify.js\"></script>\n```\n\n### Using the minified and tested production version (source-map available)\n\n```html\n<script type=\"text/javascript\" src=\"dist/purify.min.js\"></script>\n```\n\nAfterwards you can sanitize strings by executing the following code:\n\n```js\nvar clean = DOMPurify.sanitize(dirty);\n```\n\nThe resulting HTML can be written into a DOM element using `innerHTML` or the DOM using `document.write()`. That is fully up to you. But keep in mind, if you use the sanitized HTML with jQuery's very insecure `elm.html()` method, then the `SAFE_FOR_JQUERY` flag has to be set to make sure it's safe! Other than that, all is fine.\n\n### Is there any foot-gun potential?\n\nWell, please note, if you _first_ sanitize HTML and then modify it _afterwards_, you might easily **void the effects of sanitization**. If you feed the sanitized markup to another library _after_ sanitization, please be certain that the library doesn't mess around with the HTML on its own.\n\njQuery does exactly that and that is why we have this flag mentioned above.\n\n### Okay, makes sense, let's move on\n\nAfter sanitizing your markup, you can also have a look at the property `DOMPurify.removed` and find out, what elements and attributes were thrown out. Please **do not use** this property for making any security critical decisions. This is just a little helper for curious minds.\n\nIf you're using an [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) module loader like [Require.js](http://requirejs.org/), you can load this script asynchronously as well:\n\n```js\nimport DOMPurify from 'dompurify';\n\nvar clean = DOMPurify.sanitize(dirty);\n```\n\nDOMPurify also works server-side with Node.js as well as client-side via [Browserify](http://browserify.org/) or similar translators. At least Node.js 4.x or newer is required. Our support strives to follow the [Node.js release cycle](https://nodejs.org/en/about/releases/). DOMPurify intends to support any version being flagged as active. At the same time we phase out support for any version flagged as maintenance. DOMPurify might not break with all versions in maintenance immediately but stops to run tests against these older versions.\n\n```bash\nnpm install dompurify\n```\n\nFor JSDOM v10 or newer\n\n```js\nconst createDOMPurify = require('dompurify');\nconst { JSDOM } = require('jsdom');\n\nconst window = new JSDOM('').window;\nconst DOMPurify = createDOMPurify(window);\n\nconst clean = DOMPurify.sanitize(dirty);\n```\n\nFor JSDOM versions older than v10\n\n```js\nconst createDOMPurify = require('dompurify');\nconst jsdom = require('jsdom').jsdom;\n\nconst window = jsdom('').defaultView;\nconst DOMPurify = createDOMPurify(window);\n\nconst clean = DOMPurify.sanitize(dirty);\n```\n\n## Is there a demo?\n\nOf course there is a demo! [Play with DOMPurify](https://cure53.de/purify)\n\n## What if I find a _security_ bug?\n\nFirst of all, please immediately contact us via [email](mailto:mario@cure53.de) so we can work on a fix. [PGP key](https://keyserver.ubuntu.com/pks/lookup?op=vindex&search=0xC26C858090F70ADA)\n\nAlso, you probably qualify for a bug bounty! The fine folks over at [FastMail](https://www.fastmail.com/) use DOMPurify for their services and added our library to their bug bounty scope. So, if you find a way to bypass or weaken DOMPurify, please also have a look at their website and the [bug bounty info](https://www.fastmail.com/about/bugbounty.html).\n\n## Some purification samples please?\n\nHow does purified markup look like? Well, [the demo](https://cure53.de/purify) shows it for a big bunch of nasty elements. But let's also show some smaller examples!\n\n```js\nDOMPurify.sanitize('<img src=x onerror=alert(1)//>'); // becomes <img src=\"x\">\nDOMPurify.sanitize('<svg><g/onload=alert(2)//<p>'); // becomes <svg><g></g></svg>\nDOMPurify.sanitize('<p>abc<iframe//src=jAva&Tab;script:alert(3)>def</p>'); // becomes <p>abcdef</p>\nDOMPurify.sanitize('<math><mi//xlink:href=\"data:x,<script>alert(4)</script>\">'); // becomes <math><mi></mi></math>\nDOMPurify.sanitize('<TABLE><tr><td>HELLO</tr></TABL>'); // becomes <table><tbody><tr><td>HELLO</td></tr></tbody></table>\nDOMPurify.sanitize('<UL><li><A HREF=//google.com>click</UL>'); // becomes <ul><li><a href=\"//google.com\">click</a></li></ul>\n```\n\n## What is supported?\n\nDOMPurify currently supports HTML5, SVG and MathML. DOMPurify per default allows CSS, HTML custom data attributes. DOMPurify also supports the Shadow DOM - and sanitizes DOM templates recursively. DOMPurify also allows you to sanitize HTML for being used with the jQuery `$()` and `elm.html()` methods but requires the `SAFE_FOR_JQUERY` flag for that - see below.\n\n## What about older browsers like MSIE8?\n\nDOMPurify offers a fall-back behavior for older MSIE browsers. It uses the MSIE-only `toStaticHTML` feature to sanitize. Note however that in this fall-back mode, pretty much none of the configuration flags shown below have any effect. You need to handle that yourself.\n\nIf not even `toStaticHTML` is supported, DOMPurify does nothing at all. It simply returns exactly the string that you fed it.\n\nDOMPurify also exposes a property called `isSupported`, which tells you whether DOMPurify will be able to do its job.\n\n## What about DOMPurify and Trusted Types?\n\nIn version 1.0.9, support for [Trusted Types API](https://github.com/WICG/trusted-types) was added to DOMPurify.\nIn version 2.0.0, a config flag was added to control DOMPurify's behavior regarding this.\n\nWhen `DOMPurify.sanitize` is used in an environment where the Trusted Types API is available and `RETURN_TRUSTED_TYPE` is set to `true`, it tries to return a `TrustedHTML` value instead of a string (the behavior for `RETURN_DOM`, `RETURN_DOM_FRAGMENT`, and `RETURN_DOM_IMPORT` config options does not change).\n\n## Can I configure DOMPurify?\n\nYes. The included default configuration values are pretty good already - but you can of course override them. Check out the [`/demos`](https://github.com/cure53/DOMPurify/tree/main/demos) folder to see a bunch of examples on how you can [customize DOMPurify](https://github.com/cure53/DOMPurify/tree/main/demos#what-is-this).\n\n```js\n// make output safe for usage in jQuery's $()/html() method (default is false)\nvar clean = DOMPurify.sanitize(dirty, {SAFE_FOR_JQUERY: true});\n\n// strip {{ ... }} and <% ... %> to make output safe for template systems\n// be careful please, this mode is not recommended for production usage.\n// allowing template parsing in user-controlled HTML is not advised at all.\n// only use this mode if there is really no alternative.\nvar clean = DOMPurify.sanitize(dirty, {SAFE_FOR_TEMPLATES: true});\n\n// allow only <b>\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: ['b']});\n\n// allow only <b> and <q> with style attributes (for whatever reason)\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: ['b', 'q'], ALLOWED_ATTR: ['style']});\n\n// allow all safe HTML elements but neither SVG nor MathML\nvar clean = DOMPurify.sanitize(dirty, {USE_PROFILES: {html: true}});\n\n// allow all safe SVG elements and SVG Filters\nvar clean = DOMPurify.sanitize(dirty, {USE_PROFILES: {svg: true, svgFilters: true}});\n\n// allow all safe MathML elements and SVG\nvar clean = DOMPurify.sanitize(dirty, {USE_PROFILES: {mathMl: true, svg: true}});\n\n// leave all as it is but forbid <style>\nvar clean = DOMPurify.sanitize(dirty, {FORBID_TAGS: ['style']});\n\n// leave all as it is but forbid style attributes\nvar clean = DOMPurify.sanitize(dirty, {FORBID_ATTR: ['style']});\n\n// extend the existing array of allowed tags\nvar clean = DOMPurify.sanitize(dirty, {ADD_TAGS: ['my-tag']});\n\n// extend the existing array of attributes\nvar clean = DOMPurify.sanitize(dirty, {ADD_ATTR: ['my-attr']});\n\n// extend the existing array of tags that can use Data URIs\nvar clean = DOMPurify.sanitize(dirty, {ADD_DATA_URI_TAGS: ['a', 'area']});\n\n// prohibit HTML5 data attributes (default is true)\nvar clean = DOMPurify.sanitize(dirty, {ALLOW_DATA_ATTR: false});\n\n// allow external protocol handlers in URL attributes (default is false)\n// by default only http, https, ftp, ftps, tel, mailto, callto, cid and xmpp are allowed.\nvar clean = DOMPurify.sanitize(dirty, {ALLOW_UNKNOWN_PROTOCOLS: true});\n\n// allow specific protocols handlers in URL attributes (default is false)\n// by default only http, https, ftp, ftps, tel, mailto, callto, cid and xmpp are allowed.\n// Default RegExp: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i;\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|xxx):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i;});\n\n// return a DOM HTMLBodyElement instead of an HTML string (default is false)\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM: true});\n\n// return a DOM DocumentFragment instead of an HTML string (default is false)\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM_FRAGMENT: true});\n\n// return a DOM DocumentFragment instead of an HTML string (default is false)\n// also import it into the current document (default is false).\n// RETURN_DOM_IMPORT must be set if you would like to append\n// the returned node to the current document\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM_FRAGMENT: true, RETURN_DOM_IMPORT: true});\ndocument.body.appendChild(clean);\n\n// use the RETURN_TRUSTED_TYPE flag to turn on Trusted Types support if available\nvar clean = DOMPurify.sanitize(dirty, {RETURN_TRUSTED_TYPE: true}); // will return a TrustedHTML object instead of a string if possible\n\n// return entire document including <html> tags (default is false)\nvar clean = DOMPurify.sanitize(dirty, {WHOLE_DOCUMENT: true});\n\n// disable DOM Clobbering protection on output (default is true, handle with care!)\nvar clean = DOMPurify.sanitize(dirty, {SANITIZE_DOM: false});\n\n// keep an element's content when the element is removed (default is true)\nvar clean = DOMPurify.sanitize(dirty, {KEEP_CONTENT: false});\n\n// glue elements like style, script or others to document.body and prevent unintuitive browser behavior in several edge-cases (default is false)\nvar clean = DOMPurify.sanitize(dirty, {FORCE_BODY: true});\n\n// use the IN_PLACE mode to sanitize a node \"in place\", which is much faster depending on how you use DOMPurify\nvar dirty = document.createElement('a');\ndirty.setAttribute('href', 'javascript:alert(1)');\nvar clean = DOMPurify.sanitize(dirty, {IN_PLACE: true}); // see https://github.com/cure53/DOMPurify/issues/288 for more info\n```\n\nThere is even [more examples here](https://github.com/cure53/DOMPurify/tree/main/demos#what-is-this), showing how you can run, customize and configure DOMPurify to fit your needs.\n\n## Persistent Configuration\n\nInstead of repeatedly passing the same configuration to `DOMPurify.sanitize`, you can use the `DOMPurify.setConfig` method. Your configuration will persist until your next call to `DOMPurify.setConfig`, or until you invoke `DOMPurify.clearConfig` to reset it. Remember that there is only one active configuration, which means once it is set, all extra configuration parameters passed to `DOMPurify.sanitize` are ignored.\n\n## Hooks\n\nDOMPurify allows you to augment its functionality by attaching one or more functions with the `DOMPurify.addHook` method to one of the following hooks:\n\n- `beforeSanitizeElements`\n- `uponSanitizeElement` (No 's' - called for every element)\n- `afterSanitizeElements`\n- `beforeSanitizeAttributes`\n- `uponSanitizeAttribute`\n- `afterSanitizeAttributes`\n- `beforeSanitizeShadowDOM`\n- `uponSanitizeShadowNode`\n- `afterSanitizeShadowDOM`\n\nIt passes the currently processed DOM node, when needed a literal with verified node and attribute data and the DOMPurify configuration to the callback. Check out the [MentalJS hook demo](https://github.com/cure53/DOMPurify/blob/main/demos/hooks-mentaljs-demo.html) to see how the API can be used nicely.\n\n_Example_:\n\n```js\nDOMPurify.addHook('beforeSanitizeElements', function (\n  currentNode,\n  hookEvent,\n  config\n) {\n  // Do something with the current node and return it\n  // You can also mutate hookEvent (i.e. set hookEvent.forceKeepAttr = true)\n  return currentNode;\n});\n```\n\n## Continuous Integration\n\nWe are currently using Travis CI in combination with BrowserStack. This gives us the possibility to confirm for each and every commit that all is going according to plan in all supported browsers. Check out the build logs here: https://travis-ci.org/cure53/DOMPurify\n\nYou can further run local tests by executing `npm test`. The tests work fine with Node.js v0.6.2 and jsdom@8.5.0.\n\nAll relevant commits will be signed with the key `0x24BB6BF4` for additional security (since 8th of April 2016).\n\n### Development and contributing\n\n#### Installation (`yarn i`)\n\nWe support both `yarn` and `npm@5.2` officially while providing lock-files for either dependency manager to provide reproducible installs and builds on either or. TravisCI itself is configured to install dependencies using `yarn`. When using an older version of `npm` we can not fully ensure the versions of installed dependencies which might lead to unanticipated problems.\n\n#### Scripts\n\nWe rely on npm run-scripts for integrating with our tooling infrastructure. We use ESLint as a pre-commit hook to ensure code consistency. Moreover, to ease formatting we use [prettier](https://github.com/prettier/prettier) while building the `/dist` assets happens through `rollup`.\n\nThese are our npm scripts:\n\n- `npm run dev` to start building while watching sources for changes\n- `npm run test` to run our test suite via jsdom and karma\n  - `test:jsdom` to only run tests through jsdom\n  - `test:karma` to only run tests through karma\n- `npm run lint` to lint the sources using ESLint (via xo)\n- `npm run format` to format our sources using prettier to ease to pass ESLint\n- `npm run build` to build our distribution assets minified and unminified as a UMD module\n  - `npm run build:umd` to only build an unminified UMD module\n  - `npm run build:umd:min` to only build a minified UMD module\n\nNote: all run scripts triggered via `npm run <script>` can also be started using `yarn <script>`.\n\nThere are more npm scripts but they are mainly to integrate with CI or are meant to be \"private\" for instance to amend build distribution files with every commit.\n\n## Security Mailing List\n\nWe maintain a mailing list that notifies whenever a security-critical release of DOMPurify was published. This means, if someone found a bypass and we fixed it with a release (which always happens when a bypass was found) a mail will go out to that list. This usually happens within minutes or few hours after learning about a bypass. The list can be subscribed to here:\n\n[https://lists.ruhr-uni-bochum.de/mailman/listinfo/dompurify-security](https://lists.ruhr-uni-bochum.de/mailman/listinfo/dompurify-security)\n\nFeature releases will not be announced to this list.\n\n## Who contributed?\n\nMany people helped and help DOMPurify become what it is and need to be acknowledged here!\n\n[oreoshake 💸](https://github.com/oreoshake), [dcramer 💸](https://github.com/dcramer),[tdeekens ❤️](https://github.com/tdeekens), [neilj](https://github.com/neilj), [fhemberger](https://github.com/fhemberger), [Joris-van-der-Wel](https://github.com/Joris-van-der-Wel), [ydaniv](https://github.com/ydaniv), [filedescriptor](https://github.com/filedescriptor), [ConradIrwin](https://github.com/ConradIrwin), [gibson042](https://github.com/gibson042), [choumx](https://github.com/choumx), [0xSobky](https://github.com/0xSobky), [styfle](https://github.com/styfle), [koto](https://github.com/koto), [tlau88](https://github.com/tlau88), [strugee](https://github.com/strugee), [oparoz](https://github.com/oparoz), [mathiasbynens](https://github.com/mathiasbynens), [edg2s](https://github.com/edg2s), [dnkolegov](https://github.com/dnkolegov), [dhardtke](https://github.com/dhardtke), [wirehead](https://github.com/wirehead), [thorn0](https://github.com/thorn0), [styu](https://github.com/styu), [mozfreddyb](https://github.com/mozfreddyb), [mikesamuel](https://github.com/mikesamuel), [jorangreef](https://github.com/jorangreef), [jimmyhchan](https://github.com/jimmyhchan), [jameydeorio](https://github.com/jameydeorio), [jameskraus](https://github.com/jameskraus), [hyderali](https://github.com/hyderali), [hansottowirtz](https://github.com/hansottowirtz), [hackvertor](https://github.com/hackvertor), [freddyb](https://github.com/freddyb), [flavorjones](https://github.com/flavorjones), [djfarrelly](https://github.com/djfarrelly), [devd](https://github.com/devd), [camerondunford](https://github.com/camerondunford), [buu700](https://github.com/buu700), [buildog](https://github.com/buildog), [alabiaga](https://github.com/alabiaga), [Vector919](https://github.com/Vector919), [Robbert](https://github.com/Robbert), [GreLI](https://github.com/GreLI), [FuzzySockets](https://github.com/FuzzySockets), [ArtemBernatskyy](https://github.com/ArtemBernatskyy), [@garethheyes](https://twitter.com/garethheyes), [@filedescriptor](https://twitter.com/filedescriptor), [@shafigullin](https://twitter.com/shafigullin), [@mmrupp](https://twitter.com/mmrupp), [@irsdl](https://twitter.com/irsdl),[ShikariSenpai](https://github.com/ShikariSenpai), [ansjdnakjdnajkd](https://github.com/ansjdnakjdnajkd), [@asutherland](https://twitter.com/asutherland), [@mathias](https://twitter.com/mathias), [@cgvwzq](https://twitter.com/cgvwzq), [@robbertatwork](https://twitter.com/robbertatwork), [@giutro](https://twitter.com/giutro) and especially [@masatokinugawa](https://twitter.com/masatokinugawa)\n\nAnd last but not least, thanks to [BrowserStack](https://browserstack.com) for supporting this project with their services for free and delivering excellent, dedicated and very professional support on top of that.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/cure53/DOMPurify.git"
  },
  "resolutions": {
    "natives": "1.1.6"
  },
  "scripts": {
    "build": "cross-env run-p build:umd build:umd:min build:es build:cjs",
    "build-demo": "node scripts/build-demo.js",
    "build:cjs": "cross-env NODE_ENV=development BABEL_ENV=rollup rollup -c -f cjs -o dist/purify.cjs.js",
    "build:es": "cross-env NODE_ENV=development BABEL_ENV=rollup rollup -c -f es -o dist/purify.es.js",
    "build:umd": "cross-env NODE_ENV=development BABEL_ENV=rollup rollup -c -f umd -o dist/purify.js",
    "build:umd:min": "cross-env NODE_ENV=production BABEL_ENV=rollup rollup -c -f umd -o dist/purify.min.js",
    "commit-amend-build": "scripts/commit-amend-build.sh",
    "dev": "cross-env NODE_ENV=development BABEL_ENV=rollup rollup -w -c -o dist/purify.js",
    "format": "yarn format:js && yarn format:md",
    "format:js": "prettier --write '{src,demos,scripts,test,website}/*.js'",
    "format:md": "prettier --write --parser markdown '**/*.md'",
    "lint": "xo src/*.js",
    "prebuild": "rimraf dist/**",
    "test": "cross-env NODE_ENV=test BABEL_ENV=rollup npm run lint &&  npm run test:jsdom && npm run test:karma -- --browsers Chrome",
    "test:ci": "cross-env NODE_ENV=test BABEL_ENV=rollup npm run test:jsdom && npm run test:karma -- --log-level error --reporters dots --single-run --shouldTestOnBrowserStack=\"${TEST_BROWSERSTACK}\" --shouldProbeOnly=\"${TEST_PROBE_ONLY}\"",
    "test:jsdom": "cross-env NODE_ENV=test BABEL_ENV=rollup node test/jsdom-node-runner --dot",
    "test:karma": "cross-env NODE_ENV=test BABEL_ENV=rollup karma start test/karma.conf.js --log-level warn "
  },
  "version": "2.0.12",
  "xo": {
    "semicolon": true,
    "space": 2,
    "extends": [
      "prettier"
    ],
    "plugins": [
      "prettier"
    ],
    "rules": {
      "import/no-useless-path-segments": 0,
      "prettier/prettier": [
        "error",
        {
          "trailingComma": "es5",
          "singleQuote": true
        }
      ],
      "camelcase": [
        "error",
        {
          "properties": "never"
        }
      ]
    },
    "globals": [
      "window",
      "VERSION"
    ]
  }
}
